package boundedstack;

import java.util.Iterator;

/**
 * Write a one-sentence summary of your class here. Follow it with additional details about its
 * purpose, what abstraction it represents, and how to use it.
 * 
 * @author sugie
 * @version Feb 23, 2019
 * @param <E>
 */
public abstract class AbstractStack<E>
    implements Stack<E>
{
    /**
     * 
     */
    protected int capacity;


    /**
     * Create a new AbstractStack object.
     * 
     * @param max
     *            capacity of the bounded stack
     */
    public AbstractStack(int max)
    {
        capacity = max;
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public int capacity()
    {
        return capacity;
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("[");
        Iterator<E> iterator = this.iterator();
        while (iterator.hasNext())
        {
            sb.append(iterator.next());
            if (iterator.hasNext())
            {
                sb.append(", ");
            }
        }
        sb.append("]:");
        sb.append(capacity());
        return sb.toString();
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public boolean equals(Object obj)
    {
        if (obj == null)
        {
            return false;
        }
        if (obj == this)
        {
            return true;
        }
        if (!(obj instanceof Stack))
        {
            return false;
        }
        Stack<?> that = (Stack<?>)obj;
        if (this.capacity() != that.capacity())
        {
            return false;
        }
        if (this.depth() != that.depth())
        {
            return false;
        }
        Iterator<E> thisIter = this.iterator();
        Iterator<?> thatIter = that.iterator();
        while (thisIter.hasNext())
        {
            E elem = thisIter.next();
            Object o = thatIter.next();
            if (!elem.equals(o))
            {
                return false;
            }
        }

        return true;
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public int hashCode()
    {
        int result = 17;
        for (E element : this)
        {
            result = 31 * result + element.hashCode();
        }
        result = 31 * result + capacity();
        return result;

    }


    /**
     * {@inheritDoc}
     */
    @Override
    public Stack<E> copy()
    {
        Stack<E> result = this.newInstance();
        for (E element : this)
        {
            result.push(element);
        }
        return result;
    }


    @Override
    public void reverse()
    {
        // this = [A, B, C, D]:6
        if (this.depth() != 0)
        {
            E element = this.pop();
            // this = [A, B, C]:6 and element = D
            this.reverse();
            // this = [C, B, A]:6 and element = D
            putOnBottom(element);
            // this = [D, C, B, A]:6 and element = ...
        }
    }


    /**
     * Helper method for reverse that adds that to this.
     * 
     * @param element
     *            to be added to this
     */
    private void putOnBottom(E element)
    {
        if (this.depth() != 0)
        {
            E e = this.pop();
            putOnBottom(element);
            this.push(e);
        }
        else
        { // depth == 0
            this.push(element);
        }
    }


    // stack.pushMultiple("A", "B", "C");
    /**
     * {@inheritDoc}
     */
    @Override
    public void pushMultiple(E... elements)
    {
        if (depth() == capacity())
        {
            throw new IllegalStateException();
        }
        if (elements == null)
        {
            throw new IllegalArgumentException();
        }
        for (E elem : elements)
        {
            push(elem);
        }
    }
}
